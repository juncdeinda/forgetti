// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`hooks > should correct transform any nested hooks call 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useA, useB, useC, useD, useE, useF, useG, useH } from 'whatever';
function Example(props) {
  let _cache = _$$cache(_useMemo, 20),
    a = null,
    _hoisted = useB(),
    _hoisted2 = useC(),
    _hoisted3 = useD(),
    _hoisted4 = useE(),
    _hoisted5 = useF(),
    _hoisted6 = useG(),
    _hoisted7 = useH(),
    _hoisted8 = useI(),
    _hoisted9 = useJ(),
    _hoisted12 = useK(),
    _hoisted10 = a = _$$equals(_cache, 0, _hoisted12) ? _cache[0] : _cache[0] = _hoisted12,
    _hoisted11 = useJ(),
    _equals3 = _$$equals(_cache, 2, _hoisted2),
    _value3 = _equals3 ? _cache[2] : _cache[2] = _hoisted2,
    _value4 = _equals3 ? _cache[3] : _cache[3] = [_value3, 'array'],
    _equals5 = _$$equals(_cache, 5, _hoisted3),
    _value6 = _equals5 ? _cache[5] : _cache[5] = _hoisted3,
    _equals6 = _$$equals(_cache, 6, _hoisted4),
    _value7 = _equals6 ? _cache[6] : _cache[6] = _hoisted4,
    _equals7 = _$$equals(_cache, 7, _hoisted5),
    _value8 = _equals7 ? _cache[7] : _cache[7] = _hoisted5,
    _equals8 = _$$equals(_cache, 8, _hoisted6),
    _value9 = _equals8 ? _cache[8] : _cache[8] = _hoisted6,
    _value10 = _equals5 && _equals6 && _equals7 && _equals8 ? _cache[9] : _cache[9] = {
      d: _value6,
      [_value7]: _value8,
      ..._value9
    },
    _equals11 = _$$equals(_cache, 11, _hoisted7),
    _value12 = _equals11 ? _cache[11] : _cache[11] = _hoisted7,
    _value13 = _equals11 ? _cache[12] : _cache[12] = \`testA\${_value12}testB\`,
    _equals13 = _$$equals(_cache, 14, _hoisted8),
    _value15 = _equals13 ? _cache[14] : _cache[14] = _hoisted8,
    _equals14 = _$$equals(_cache, 15, _hoisted9),
    _value16 = _equals14 ? _cache[15] : _cache[15] = _hoisted9,
    _value17 = _equals13 && _equals14 ? _cache[16] : _cache[16] = _value15 === _value16;
  return useA(_$$equals(_cache, 1, _hoisted) ? _cache[1] : _cache[1] = _hoisted, _$$equals(_cache, 4, _value4) ? _cache[4] : _cache[4] = _value4, _$$equals(_cache, 10, _value10) ? _cache[10] : _cache[10] = _value10, _$$equals(_cache, 13, _value13) ? _cache[13] : _cache[13] = _value13, _$$equals(_cache, 17, _value17) ? _cache[17] : _cache[17] = _value17, _$$equals(_cache, 18, _hoisted10) ? _cache[18] : _cache[18] = _hoisted10, ...(_$$equals(_cache, 19, _hoisted11) ? _cache[19] : _cache[19] = _hoisted11));
}"
`;

exports[`hooks > should correct transform derived hooks call 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { memo as _memo } from \\"react\\";
import { $$memo as _$$memo } from \\"forgetti/runtime\\";
const _Example = _$$memo(_memo, \\"_Example\\", _values => <div>{_values[0]}</div>),
  _Example2 = _$$memo(_memo, \\"_Example2\\", _values2 => <>{_values2[0]}{_values2[1]}</>);
import { useA, useB, useC } from 'whatever';
function Example(props) {
  let _cache = _$$cache(_useMemo, 24),
    a = null,
    _hoisted = useA(),
    _hoisted2 = useB(),
    _hoisted3 = useC(),
    _hoisted4 = useH(),
    _hoisted5 = useI(),
    _hoisted6 = useJ(),
    _hoisted7 = useK(),
    _hoisted8 = useL(),
    _hoisted9 = useM(),
    _hoisted10 = useN(),
    _equals = _$$equals(_cache, 0, _hoisted),
    _value = _equals ? _cache[0] : _cache[0] = _hoisted,
    _equals2 = _$$equals(_cache, 1, _hoisted2),
    _value2 = _equals2 ? _cache[1] : _cache[1] = _hoisted2,
    _equals3 = _$$equals(_cache, 2, _hoisted3),
    _value3 = _equals3 ? _cache[2] : _cache[2] = _hoisted3,
    _equals4 = _$$equals(_cache, 3, _hoisted4),
    _value4 = _equals4 ? _cache[3] : _cache[3] = _hoisted4,
    _value5 = _equals4 ? _cache[4] : _cache[4] = \`testA\${_value4}testB\`,
    _equals5 = _$$equals(_cache, 5, _value5),
    _value6 = _equals5 ? _cache[5] : _cache[5] = _value5,
    _equals6 = _$$equals(_cache, 6, _hoisted5),
    _value7 = _equals6 ? _cache[6] : _cache[6] = _hoisted5,
    _equals7 = _$$equals(_cache, 7, _hoisted6),
    _value8 = _equals7 ? _cache[7] : _cache[7] = _hoisted6,
    _value9 = _equals6 && _equals7 ? _cache[8] : _cache[8] = _value7 === _value8,
    _equals9 = _$$equals(_cache, 9, _value9),
    _value10 = _equals9 ? _cache[9] : _cache[9] = _value9,
    _value11;
  if (_$$equals(_cache, 10, _hoisted7) ? _cache[10] : _cache[10] = _hoisted7) {
    _value11 = 'a';
  } else {
    _value11 = 'b';
  }
  let _equals11 = _$$equals(_cache, 11, _value11),
    _value13 = _equals11 ? _cache[11] : _cache[11] = _value11,
    _equals12 = _$$equals(_cache, 12, _hoisted8),
    _value14 = _equals12 ? _cache[12] : _cache[12] = _hoisted8,
    _value15 = _equals12 ? _cache[13] : _cache[13] = [_value14],
    _equals13 = _$$equals(_cache, 14, _value15),
    _value16 = _equals13 ? _cache[14] : _cache[14] = _value15,
    _value17 = _equals13 ? _cache[15] : _cache[15] = /*@forgetti jsx*/<_Example v={_value16} />,
    _equals14 = _$$equals(_cache, 16, _value17),
    _value18 = _equals14 ? _cache[16] : _cache[16] = _value17,
    _equals15 = _$$equals(_cache, 17, _hoisted9),
    _value19 = _equals15 ? _cache[17] : _cache[17] = _hoisted9,
    _equals16 = _$$equals(_cache, 18, _hoisted10),
    _value20 = _equals16 ? _cache[18] : _cache[18] = _hoisted10,
    _value21 = _equals15 && _equals16 ? _cache[19] : _cache[19] = [_value19, _value20],
    _equals18 = _$$equals(_cache, 20, _value21),
    _value22 = _equals18 ? _cache[20] : _cache[20] = _value21,
    _value23 = _equals18 ? _cache[21] : _cache[21] = /*@forgetti jsx*/<_Example2 v={_value22} />,
    _equals19 = _$$equals(_cache, 22, _value23),
    _value24 = _equals19 ? _cache[22] : _cache[22] = _value23;
  return _equals && _equals2 && _equals3 && _equals5 && _equals9 && _equals11 && _equals14 && _equals19 ? _cache[23] : _cache[23] = {
    [_value]: _value2,
    ..._value3,
    [_value6]: _value10,
    a: _value13,
    b: _value18,
    c: _value24
  };
}"
`;

exports[`hooks > should correct transform nested hooks call (issue #14) 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useDeferredValue } from 'react';
import { useAtomValue } from 'jotai';
import { stateAtom } from 'whatever';
function Example(props) {
  let _cache = _$$cache(_useMemo, 2),
    _hoisted = useAtomValue(0 in _cache ? _cache[0] : _cache[0] = stateAtom);
  return useDeferredValue(_$$equals(_cache, 1, _hoisted) ? _cache[1] : _cache[1] = _hoisted);
}"
`;

exports[`hooks > should optimize useCallback 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 5),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.value,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals2 ? _cache[3] : _cache[3] = [_value3];
  return _equals2 ? _cache[4] : _cache[4] = () => props.value();
}"
`;

exports[`hooks > should optimize useCallback with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 2),
    _value = 0 in _cache ? _cache[0] : _cache[0] = [];
  return 1 in _cache ? _cache[1] : _cache[1] = () => props.value();
}"
`;

exports[`hooks > should optimize useCallback with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 2),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props;
  return _equals ? _cache[1] : _cache[1] = () => props.value();
}"
`;

exports[`hooks > should optimize useEffect 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 4),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.example,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2;
  useEffect(() => props.value(), [_equals2 ? _cache[3] : _cache[3] = [_value3]]);
}"
`;

exports[`hooks > should optimize useEffect with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 1);
  useEffect(() => props.value(), [0 in _cache ? _cache[0] : _cache[0] = []]);
}"
`;

exports[`hooks > should optimize useEffect with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 2),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = () => props.value();
  useEffect(_value2, [_value2]);
}"
`;

exports[`hooks > should optimize useMemo 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 5),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = _value.value,
    _equals2 = _$$equals(_cache, 2, _value2),
    _value3 = _equals2 ? _cache[2] : _cache[2] = _value2,
    _value4 = _equals2 ? _cache[3] : _cache[3] = [_value3];
  return _equals2 ? _cache[4] : _cache[4] = (() => props.value())();
}"
`;

exports[`hooks > should optimize useMemo with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 2),
    _value = 0 in _cache ? _cache[0] : _cache[0] = [];
  return 1 in _cache ? _cache[1] : _cache[1] = (() => props.value())();
}"
`;

exports[`hooks > should optimize useMemo with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 3),
    _equals = _$$equals(_cache, 0, props),
    _value = _equals ? _cache[0] : _cache[0] = props,
    _value2 = _equals ? _cache[1] : _cache[1] = () => props.value();
  return _equals ? _cache[2] : _cache[2] = _value2();
}"
`;

exports[`hooks > should optimize useRef 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$ref as _$$ref } from \\"forgetti/runtime\\";
import { useRef } from 'react';
function Example(props) {
  let _ref = _$$ref(_useRef, 1);
  return 0 in _ref ? _ref[0] : _ref[0] = {
    current: props.value
  };
}"
`;

exports[`hooks > should optimize useRef and useMemo 1`] = `
"import { useRef as _useRef } from \\"react\\";
import { $$ref as _$$ref } from \\"forgetti/runtime\\";
import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useRef, useMemo } from 'react';
function Example(props) {
  let _cache = _$$cache(_useMemo, 5),
    _ref = _$$ref(_useRef, 1);
  const aRef = 0 in _ref ? _ref[0] : _ref[0] = {
    current: props.foo
  };
  let _equals = _$$equals(_cache, 0, props),
    _value2 = _equals ? _cache[0] : _cache[0] = props,
    _value3 = _equals ? _cache[1] : _cache[1] = _value2.bar,
    _equals2 = _$$equals(_cache, 2, _value3),
    _value4 = _equals2 ? _cache[2] : _cache[2] = _value3,
    _value5 = _equals2 ? _cache[3] : _cache[3] = [_value4];
  return _equals2 ? _cache[4] : _cache[4] = (() => props.bar())();
}"
`;
